#!/usr/bin/env bash

################################################################################
# System specific functions
################################################################################
case "$(uname)" in
  "Linux")
    ############################################################################
    # Open the current directory, otherwise open the given location
    ############################################################################
    function open() {
      if [ $# -eq 0 ]; then
        xdg-open . >/dev/null 2>&1
      else
        xdg-open "$@" >/dev/null 2>&1
      fi
    }

    ;;
  "Darwin")

    ;;
esac

################################################################################
# Update and upgrade everything
################################################################################
function f5() {
  # Dotfiles
  git -C "$HOME/.dotfiles" pull-sub
  git -C "$HOME/.dotfiles" submodule update --recursive --remote
  git -C "$HOME/.dotfiles" fetch --prune

  # Vim
  vim +PlugUpgrade +PlugUpdate +CocUpdateSync +PlugClean! +qall

  # Plugins
  for dir in \
    "$HOME/.oh-my-zsh" \
    "$HOME/.oh-my-zsh/custom"/{themes,plugins}/*/ \
    "$HOME/.tmux/plugins/"*/; do

    if [ ! -d "$dir/.git" ]; then
      continue
    fi

    if [[ "$dir" == "$HOME/.tmux/plugins/tpm/" ]]; then
      continue
    fi

    git -C "$dir" checkout "$(git -C "$dir" symbolic-ref --short HEAD 2>/dev/null || echo "master")"
    git -C "$dir" pull
    git -C "$dir" fetch --prune
  done

  case "$(uname)" in
    "Linux")
      sudo apt update -y
      sudo apt dist-upgrade -y
      sudo apt autoremove -y
      sudo apt clean all -y

      ;;
    "Darwin")
      brew update
      brew bundle --file "$HOME/.dotfiles/Brewfile" --force cleanup
      brew bundle --file "$HOME/.dotfiles/Brewfile"
      brew upgrade
      brew cu --all --yes --cleanup
      brew cleanup -s

      mas upgrade
      sudo softwareupdate -i -a

      sudo find 2> /dev/null /private/var/folders/ -type d -name com.apple.dock.launchpad -exec rm -rf {} +
      killall Dock

      ;;

    "Power Macintosh")
      brew update
      brew upgrade
      brew cleanup -s

      ;;
  esac

  # Reload zsh settings
  # shellcheck disable=SC1091
  source "$HOME/.zshrc"
}

################################################################################
# Zero fill and verify a storage device
################################################################################
function zero_fill_verify() {
  local disk="$1"
  local size=$(diskutil info "$disk" | sed -nE 's/.*Disk Size:.*\(([0-9]+) Bytes\).*/\1/p')
  local passes=1
  local threshold_bytes=$((2 * 1024 * 1024 * 1024))  # 2 GB (binary, 2147483648 bytes)
  local create_partition=0

  for arg in "$@"; do
    if [[ "$arg" == "--create-partition" ]]; then
      create_partition=1
      break
    fi
  done

  if [ -z "$disk" ] || [ ! -b "$disk" ]; then
    echo "Error: device not found or invalid: $disk"

    return 1
  fi

  printf "This will ERASE all data on %s. Continue? (y/N): " "$disk"
  IFS= read -r confirm
  [ "$confirm" != "y" ] && { echo "Operation cancelled."; return 1; }

  echo "Unmounting $disk..."
  sudo diskutil unmountDisk "$disk"

  echo "Cleaning $disk..."
  for ((index=1; index <= passes; index++)); do
    echo "- Pass $index of $passes"

    echo "Writing 0xFF..."
    tr '\000' '\377' < /dev/zero | \
      head -c "$size" | \
      sudo dd of="$disk" bs=1m status=progress || {
        echo "Error: failed to write 0xFF."

        return 1
      }

    echo "Verifying 0xFF..."
    sudo dd if="$disk" bs="$size" count=1 status=progress | \
      cmp -n "$size" - <(tr '\000' '\377' < /dev/zero) || {
        echo "Error: failed to verify 0xFF."

        return 1
      }

    echo "Writing 0x00..."
    sudo dd if=/dev/zero of="$disk" bs="$size" count=1 status=progress || {
      echo "Error: failed to write 0x00."

      return 1
    }

    echo "Verifying 0x00..."
    sudo dd if="$disk" bs="$size" count=1 status=progress | \
      cmp -n "$size" - /dev/zero || {
        echo "Error: failed to verify 0x00."

        return 1
      }
  done

  if [[ "$create_partition" -eq 1 ]]; then
    echo "Creating partition..."

    if [ "$size" -le "$threshold_bytes" ]; then
      echo "Using FAT16 (<= 2 GB)..."

      sudo diskutil eraseDisk "MS-DOS FAT16" "NO NAME" MBRFormat "$disk"
    else
      echo "Using FAT32 (> 2 GB)..."

      sudo diskutil eraseDisk "MS-DOS FAT32" "NO NAME" MBRFormat "$disk"
    fi
  fi

  sudo diskutil eject "$disk"
}

################################################################################
# Sync games library
################################################################################
function __sync_redump() {
  local group="Redump"
  local folders=(
    "NEC - PC Engine CD & TurboGrafx CD"
    "Nintendo - GameCube - NKit RVZ [zstd-19-128k]"
    "Sega - Dreamcast - GDI Files"
    "Sega - Dreamcast"
    "Sega - Mega CD & Sega CD"
    "Sega - Saturn"
    "SNK - Neo Geo CD"
    "Sony - PlayStation"
    "Sony - PlayStation Portable"
    "Sony - PlayStation 2"
    "Video CD"
  )

  for folder in "${folders[@]}"; do
    mkdir -p "./$group/$folder/"
    printf "\nProcessing: %s\n" "$folder"

    rclone sync \
      --progress \
      --ignore-case \
      --multi-thread-streams=0 \
      --size-only \
      --delete-excluded \
      \
      --filter "- *\(Demo*" \
      --filter "- *Demo\)*" \
      --filter "- *\(Debug*" \
      --filter "- *Debug\)*" \
      --filter "- *\(Beta*" \
      --filter "- *Beta\)*" \
      --filter "- *\(Proto*" \
      --filter "- *Proto\)*" \
      --filter "- *\(Prototype*" \
      --filter "- *Prototype\)*" \
      --filter "- *\(Trial*" \
      --filter "- *Trial\)*" \
      --filter "- *\(Kiosk*" \
      --filter "- *Kiosk\)*" \
      --filter "- *\(Preview*" \
      --filter "- *Preview\)*" \
      --filter "- *\(Promo*" \
      --filter "- *Promo\)*" \
      --filter "- *\(Promotional*" \
      --filter "- *Promotional\)*" \
      \
      --filter "- *\ Demo Disc\ *" \
      --filter "- *\ Interactive Multi-Game Demo Disc\ *" \
      --filter "- *\ Interactive Sampler Disc\ *" \
      --filter "- *\ Jam Pack\ *" \
      --filter "- *\ PlayStation Underground\ *" \
      --filter "- *\ Trial Edition\ *" \
      --filter "- *\ Trial Version\ *" \
      \
      --filter "+ *\(World*" \
      --filter "+ *\(USA*" \
      --filter "+ *\(Japan*" \
      --filter "+ *\(Export*" \
      --filter "+ *\(Brazil*" \
      --filter "+ *Brazil\)*" \
      \
      --filter "- *" \
      \
      --http-url "https://myrient.erista.me/files/$group/" \
      ":http:$folder/" \
      "./$group/$folder/"
  done
}

function __sync_internet_archive() {
  local group="Internet Archive"
  local folders=(
    "desktop_20240424"
    "htgdb-gamepacks"
    "mdplus_collection_22_04_16"
    "neo-geo-aes-romset"
    "Neo-geoRomCollectionByGhostware"
    "neogeoaesmvscomplete"
    "RetroarchSystemFiles/Retroarch-System/"
    "ric64s-neosd-rom-archive"
    "rom_scene_collection"
    "rom-hack-patch-archive"
    "romhacking.net-20240801"
  )

  for folder in "${folders[@]}"; do
    mkdir -p "./$group/$folder/"
    printf "\nProcessing: %s\n" "$folder"

    rclone sync \
      --progress \
      --ignore-case \
      --multi-thread-streams=0 \
      --size-only \
      --delete-excluded \
      --exclude "*.{torrent,xml,sqlite,png,jpg}" \
      "archive.org:$folder/" \
      "./$group/$folder/"
  done
}

function __sync_no_intro() {
  local group="No-Intro"
  local folders=(
    "Bandai - WonderSwan"
    "Bandai - WonderSwan Color"
    "Bandai - WonderSwan Color (Aftermarket)"
    "Microsoft - MSX"
    "Microsoft - MSX (Aftermarket)"
    "Microsoft - MSX2"
    "Microsoft - MSX2 (Aftermarket)"
    "NEC - PC Engine - TurboGrafx-16"
    "NEC - PC Engine - TurboGrafx-16 (Aftermarket)"
    "NEC - PC Engine - TurboGrafx-16 (Private)"
    "NEC - PC Engine SuperGrafx"
    "Nintendo - Family Computer Disk System (FDS)"
    "Nintendo - Family Computer Disk System (FDS) (Aftermarket)"
    "Nintendo - Family Computer Disk System (QD)"
    "Nintendo - Game Boy"
    "Nintendo - Game Boy (Aftermarket)"
    "Nintendo - Game Boy (Private)"
    "Nintendo - Game Boy Advance"
    "Nintendo - Game Boy Advance (Aftermarket)"
    "Nintendo - Game Boy Advance (Multiboot)"
    "Nintendo - Game Boy Advance (Play-Yan)"
    "Nintendo - Game Boy Advance (Private)"
    "Nintendo - Game Boy Advance (Video)"
    "Nintendo - Game Boy Advance (Video) (Aftermarket)"
    "Nintendo - Game Boy Advance (Video) (Private)"
    "Nintendo - Game Boy Advance (e-Reader)"
    "Nintendo - Game Boy Advance (e-Reader) (Aftermarket)"
    "Nintendo - Game Boy Color"
    "Nintendo - Game Boy Color (Aftermarket)"
    "Nintendo - Game Boy Color (Private)"
    "Nintendo - New Nintendo 3DS (Decrypted)"
    "Nintendo - Nintendo 3DS (Decrypted)"
    "Nintendo - Nintendo 64 (BigEndian)"
    "Nintendo - Nintendo 64 (BigEndian) (Aftermarket)"
    "Nintendo - Nintendo 64 (BigEndian) (Private)"
    "Nintendo - Nintendo 64DD"
    "Nintendo - Nintendo DS (Decrypted)"
    "Nintendo - Nintendo DS (Decrypted) (Aftermarket)"
    "Nintendo - Nintendo DS (Decrypted) (Private)"
    "Nintendo - Nintendo DSi (Decrypted)"
    "Nintendo - Nintendo DSi (Digital)"
    "Nintendo - Nintendo DSi (Digital) (CDN) (Decrypted)"
    "Nintendo - Nintendo Entertainment System (Headered)"
    "Nintendo - Nintendo Entertainment System (Headered) (Aftermarket)"
    "Nintendo - Nintendo Entertainment System (Headered) (Private)"
    "Nintendo - Nintendo Entertainment System (Headerless)"
    "Nintendo - Nintendo Entertainment System (Headerless) (Aftermarket)"
    "Nintendo - Nintendo Entertainment System (Headerless) (Private)"
    "Nintendo - Satellaview"
    "Nintendo - Satellaview (Aftermarket)"
    "Nintendo - Sufami Turbo"
    "Nintendo - Super Nintendo Entertainment System"
    "Nintendo - Super Nintendo Entertainment System (Aftermarket)"
    "Nintendo - Super Nintendo Entertainment System (Private)"
    "Nintendo - Virtual Boy"
    "Nintendo - Virtual Boy (Aftermarket)"
    "Nintendo - Virtual Boy (Private)"
    "Non-Redump - NEC - PC Engine CD + TurboGrafx CD"
    "Non-Redump - NEC - PC Engine CD + TurboGrafx CD (Aftermarket)"
    "Non-Redump - Nintendo - Nintendo GameCube"
    "Non-Redump - Nintendo - Nintendo GameCube (Aftermarket)"
    "Non-Redump - Nintendo - Nintendo GameCube (Private)"
    "Non-Redump - Nintendo - Wii"
    "Non-Redump - Panasonic - 3DO Interactive Multiplayer"
    "Non-Redump - Sega - Dreamcast"
    "Non-Redump - Sega - Dreamcast (Aftermarket)"
    "Non-Redump - Sega - Dreamcast (Private)"
    "Non-Redump - Sega - Sega Mega CD + Sega CD"
    "Non-Redump - Sega - Sega Mega CD + Sega CD (Aftermarket)"
    "Non-Redump - Sega - Sega Saturn"
    "Non-Redump - Sony - PlayStation"
    "Non-Redump - Sony - PlayStation 2"
    "Non-Redump - Sony - PlayStation Portable"
    "SNK - NeoGeo Pocket"
    "SNK - NeoGeo Pocket Color"
    "Sega - 32X"
    "Sega - 32X (Aftermarket)"
    "Sega - Dreamcast (Visual Memory Unit)"
    "Sega - Game Gear"
    "Sega - Game Gear (Aftermarket)"
    "Sega - Master System - Mark III"
    "Sega - Master System - Mark III (Aftermarket)"
    "Sega - Master System - Mark III (Private)"
    "Sega - Mega Drive - Genesis"
    "Sega - Mega Drive - Genesis (Aftermarket)"
    "Sega - Mega Drive - Genesis (Private)"
    "Sega - SG-1000"
    "Sega - SG-1000 (Aftermarket)"
    "Seta - Aleck64 (BigEndian)"
  )

  for folder in "${folders[@]}"; do
    mkdir -p "./$group/$folder/"
    printf "\nProcessing: %s\n" "$folder"

    rclone sync \
      --progress \
      --ignore-case \
      --multi-thread-streams=0 \
      --size-only \
      --delete-excluded \
      \
      --filter "- *\(Demo*" \
      --filter "- *Demo\)*" \
      --filter "- *\(Debug*" \
      --filter "- *Debug\)*" \
      --filter "- *\(Beta*" \
      --filter "- *Beta\)*" \
      --filter "- *\(Proto*" \
      --filter "- *Proto\)*" \
      --filter "- *\(Prototype*" \
      --filter "- *Prototype\)*" \
      --filter "- *\(Trial*" \
      --filter "- *Trial\)*" \
      --filter "- *\(Kiosk*" \
      --filter "- *Kiosk\)*" \
      --filter "- *\(Preview*" \
      --filter "- *Preview\)*" \
      --filter "- *\(Promo*" \
      --filter "- *Promo\)*" \
      --filter "- *\(Promotional*" \
      --filter "- *Promotional\)*" \
      \
      --filter "+ *\(World*" \
      --filter "+ *\(USA*" \
      --filter "+ *\(Japan*" \
      --filter "+ *\(Export*" \
      --filter "+ *\(Brazil*" \
      --filter "+ *Brazil\)*" \
      \
      --filter "- *" \
      --http-url "https://myrient.erista.me/files/$group/" \
      ":http:$folder/" \
      "./$group/$folder/"
  done
}

function __sync_ossc() {
  local folder="OSSC"
  mkdir -p "./$folder/"
  printf "\nProcessing: %s\n" "$folder"

  rclone sync \
    --progress \
    --ignore-case \
    --multi-thread-streams=0 \
    --size-only \
    --delete-excluded \
    --exclude "*.{jic,txt}" \
     --http-url "http://www.infocult.com/m/ossc/fw/v1-series/" \
    ":http:" \
    "./$folder"
}

function sync_games() {
  __sync_redump
  __sync_internet_archive
  __sync_no_intro
  __sync_ossc
}
