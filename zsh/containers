#!/usr/bin/env bash

################################################################################
# Internal functions to calculate the cores, memory and disk size for VMs
################################################################################
function __calculate_vm_cores() {
  # Percentage of total CPU cores to allocate
  local percentage=25
  # Minimum number of CPU cores to allocate
  local minimum=2

  case "$(uname -s)" in
    Darwin)
      # shellcheck disable=SC2155
      local total="$(sysctl -n hw.ncpu)"

      ;;
    Linux)
      # shellcheck disable=SC2155
      local total="$(nproc)"

      ;;
  esac

  if [ "$total" -le 2 ]; then
    echo "$total"

    return
  fi

  local result=$(( total * percentage / 100 ))

  if [ "$result" -lt "$minimum" ]; then
    echo "$minimum"

    return
  fi

  echo "$result"
}

function __calculate_vm_memory() {
  # Percentage of total memory to allocate
  local percentage=50
  # Minimum memory to allocate (in GiB)
  local minimum=4

  case "$(uname -s)" in
    Darwin)
      # shellcheck disable=SC2155
      local total=$(( "$(sysctl -n hw.memsize)" / 1024 / 1024 / 1024 ))

      ;;
    Linux)
      # shellcheck disable=SC2155
      local total=$(( "$(grep MemTotal /proc/meminfo | awk '{print $2}')" / 1024 / 1024 ))

      ;;
  esac

  local result=$(( total * percentage / 100 ))

  if [ "$result" -lt "$minimum" ]; then
    echo "$minimum"

    return
  fi

  echo "$result"
}

function __calculate_vm_storage() {
  # Percentage of total storage to allocate
  local percentage=5
  # Minimum storage to allocate (in GiB)
  local minimum=10

  case "$(uname -s)" in
    Darwin)
      # shellcheck disable=SC2155
      local total=$(( "$(diskutil info /dev/disk0 | awk -F'[()]' '/Disk Size/ {sub(/ Bytes/, "", $2); print $2}')" / 1073741824 ))
      ;;
    Linux)
      # shellcheck disable=SC2155
      local total=$(( "$(lsblk -bdno SIZE "/dev/$(lsblk -no pkname "$(df / --output=source | tail -n1)")")" / 1073741824 ))
      ;;
  esac

  local result=$(( total * percentage / 100 ))

  local step=$(( result < 100 ? 10 : 100 ))
  local rounded=$(( ((result + step / 2) / step) * step ))

  if [ "$rounded" -lt "$minimum" ]; then
    echo "$minimum"

    return
  fi

  echo "$rounded"
}

################################################################################
# Colima VM
################################################################################
function colima-start() {
  # shellcheck disable=SC2155
  local cores="$(__calculate_vm_cores)"
  # shellcheck disable=SC2155
  local memory="$(__calculate_vm_memory)"
  # shellcheck disable=SC2155
  local storage="$(__calculate_vm_storage)"

  colima start \
    --cpu "${cores}" \
    --memory "${memory}" \
    --disk "${storage}" \
    \
    --runtime "docker" \
    --vm-type "qemu" \
    --mount "$HOME:w" \
    --dns "1.1.1.1,8.8.8.8"
}

function colima-stop() {
  colima stop
}

function colima-purge() {
  docker-purge

  colima stop --force
  colima delete --force
}

################################################################################
# Docker purge
################################################################################
function docker-purge() {
  command docker stop "$(command docker ps -aq)" 2> /dev/null
  command docker rm -f "$(command docker ps -aq)" 2> /dev/null
  command docker rmi -f "$(command docker images -aq)" 2> /dev/null
  command docker volume rm "$(command docker volume ls -q)" 2> /dev/null
  command docker network rm "$(command docker network ls -q)" 2> /dev/null
  command docker builder prune -af
  command docker system prune -af --volumes
}

################################################################################
# Mongo
################################################################################
function mongo-init() {
  mkdir -p "$HOME/Docker/Mongo"

  command docker run \
    --detach \
    --hostname mongo \
    --name mongo \
    --restart unless-stopped \
    --env "MONGO_INITDB_ROOT_USERNAME=mongo" \
    --env "MONGO_INITDB_ROOT_PASSWORD=mongo" \
    --mount "type=bind,source=$HOME/Docker/Mongo,target=/external" \
    --publish "127.0.0.1:27017:27017" \
    mongo:latest
}

function mongo-start() {
  command docker start mongo
}

function mongo-stop() {
  command docker stop mongo
}

function mongo-purge() {
  mongo-stop
  command docker rm mongo
  rm -rf "$HOME/Docker/Mongo"
}

function mongo-terminal() {
  command docker exec -it mongo /bin/sh
}

################################################################################
# Postgres
################################################################################
function postgres-init() {
  mkdir -p "$HOME/Docker/Postgres"

  command docker run \
    --detach \
    --hostname postgres \
    --name postgres \
    --restart unless-stopped \
    --env "POSTGRES_USER=postgres" \
    --env "POSTGRES_PASSWORD=postgres" \
    --mount "type=bind,source=$HOME/Docker/Postgres,target=/external" \
    --publish "127.0.0.1:5432:5432" \
    postgres:alpine
}

function postgres-start() {
  command docker start postgres
}

function postgres-stop() {
  command docker stop postgres
}

function postgres-purge() {
  postgres-stop
  command docker rm postgres
  rm -rf "$HOME/Docker/Postgres"
}

function postgres-terminal() {
  command docker exec -it postgres /bin/sh
}

################################################################################
# Redis
################################################################################
function redis-init() {
  mkdir -p "$HOME/Docker/Redis"

  command docker run \
    --detach \
    --hostname redis \
    --name redis \
    --restart unless-stopped \
    --mount "type=bind,source=$HOME/Docker/Redis,target=/external" \
    --publish "127.0.0.1:6379:6379" \
    redis:alpine
}

function redis-start() {
  command docker start redis
}

function redis-stop() {
  command docker stop redis
}

function redis-purge() {
  redis-stop
  command docker rm redis
  rm -rf "$HOME/Docker/Redis"
}

function redis-terminal() {
  command docker exec -it redis /bin/sh
}

################################################################################
# Valkey
################################################################################
function valkey-init() {
  mkdir -p "$HOME/Docker/Valkey"

  command docker run \
    --detach \
    --hostname valkey \
    --name valkey \
    --restart unless-stopped \
    --mount "type=bind,source=$HOME/Docker/Valkey,target=/external" \
    --publish "127.0.0.1:7000:7000" \
    valkey:alpine
}

function valkey-start() {
  command docker start valkey
}

function valkey-stop() {
  command docker stop valkey
}

function valkey-purge() {
  valkey-stop
  command docker rm valkey
  rm -rf "$HOME/Docker/Valkey"
}

function valkey-terminal() {
  command docker exec -it valkey /bin/sh
}

################################################################################
# Redict
################################################################################
function redict-init() {
  mkdir -p "$HOME/Docker/Redict"

  command docker run \
    --detach \
    --hostname redict \
    --name redict \
    --restart unless-stopped \
    --mount "type=bind,source=$HOME/Docker/Redict,target=/external" \
    --publish "127.0.0.1:6379:6379" \
    registry.redict.io/redict:alpine
}

function redict-start() {
  command docker start redict
}

function redict-stop() {
  command docker stop redict
}

function redict-purge() {
  redict-stop
  command docker rm redict
  rm -rf "$HOME/Docker/Redict"
}

function redict-terminal() {
  command docker exec -it redict /bin/sh
}
