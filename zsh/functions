#!/usr/bin/env bash

################################################################################
# System specific functions
################################################################################
case "$(uname)" in
  "Linux")
    ############################################################################
    # Open the current directory, otherwise open the given location
    ############################################################################
    function open() {
      if [ $# -eq 0 ]; then
        xdg-open . >/dev/null 2>&1
      else
        xdg-open "$@" >/dev/null 2>&1
      fi
    }

    ;;
  "Darwin")

    ;;
esac

################################################################################
# Update and upgrade everything
################################################################################
function f5() {
  # Ask for the root password upfront
  sudo -v

  # Dotfiles
  git -C "$HOME/.dotfiles" pull-sub
  git -C "$HOME/.dotfiles" submodule update --recursive --remote
  git -C "$HOME/.dotfiles" fetch --prune
  git -C "$HOME/.dotfiles" gc --aggressive --prune=now

  # Vim
  vim +PlugUpgrade +PlugUpdate +CocUpdateSync +PlugClean! +qall
  for dir in "$HOME"/.vim/plugged/*/; do
    if [ -d "$dir/.git" ]; then
      git -C "$dir" fetch --prune
      git -C "$dir" gc --aggressive --prune=now
    fi
  done

  # Oh-my-zsh
  git -C "$HOME/.oh-my-zsh" checkout "$(git -C "$HOME/.oh-my-zsh" symbolic-ref --short HEAD 2>/dev/null || echo "master")"
  git -C "$HOME/.oh-my-zsh" stash clear
  git -C "$HOME/.oh-my-zsh" stash
  git -C "$HOME/.oh-my-zsh" pull
  git -C "$HOME/.oh-my-zsh" stash apply
  git -C "$HOME/.oh-my-zsh" fetch --prune
  git -C "$HOME/.oh-my-zsh" gc --aggressive --prune=now

  # Oh-my-zsh themes
  for dir in "$HOME/.oh-my-zsh/custom/themes/"*/; do
    git -C "$dir" checkout "$(git -C "$dir" symbolic-ref --short HEAD 2>/dev/null || echo "master")"
    git -C "$dir" stash clear
    git -C "$dir" stash
    git -C "$dir" pull
    git -C "$dir" stash apply
    git -C "$dir" fetch --prune
    git -C "$dir" gc --aggressive --prune=now
  done

  # Oh-my-zsh plugins
  for dir in "$HOME/.oh-my-zsh/custom/plugins/"*/; do
    git -C "$dir" checkout "$(git -C "$dir" symbolic-ref --short HEAD 2>/dev/null || echo "master")"
    git -C "$dir" stash clear
    git -C "$dir" stash
    git -C "$dir" pull
    git -C "$dir" stash apply
    git -C "$dir" fetch --prune
    git -C "$dir" gc --aggressive --prune=now
  done

  # Tmux plugins
  for dir in "$HOME/.tmux/plugins/"*/; do
    if [[ "$(basename "$dir")" == "tpm" ]]; then
      continue
    fi

    git -C "$dir" checkout "$(git -C "$dir" symbolic-ref --short HEAD 2>/dev/null || echo "master")"
    git -C "$dir" stash clear
    git -C "$dir" stash
    git -C "$dir" pull
    git -C "$dir" stash apply
    git -C "$dir" fetch --prune
    git -C "$dir" gc --aggressive --prune=now
  done

  case "$(uname)" in
    "Linux")
      sudo apt update -y
      sudo apt dist-upgrade -y
      sudo apt autoremove -y
      sudo apt clean all -y

      ;;
    "Darwin")
      brew update
      brew bundle --file "$HOME/.dotfiles/Brewfile" --force cleanup
      brew bundle --file "$HOME/.dotfiles/Brewfile"
      brew upgrade
      brew cu --all --yes --cleanup
      brew cleanup -s

      mas upgrade
      sudo softwareupdate -i -a

      ruby-install --update

      defaults write com.apple.dock ResetLaunchPad -bool true
      killall Dock

      ;;
  esac

  # Expire the sudo session immediately after the function finishes
  sudo -k

  # Reload zsh settings
  # shellcheck disable=SC1091
  source "$HOME/.zshrc"
}

################################################################################
# Convert flac to m4a
################################################################################
function prepare_albums() {
  find . -type f -name "*.flac" -exec bash -c 'for i; do echo "$i"; ffmpeg -i "$i" -map 0:a -c:a alac -y "${i%.flac}.m4a" && rm -f "$i"; done' bash {} +
  find . -type f ! -name "*.m4a" -exec rm -f {} +
  find . -type d -empty -delete
}

################################################################################
# Clean files created by macOS
################################################################################
function clean_apple_files() {
  find . -name "._*" -exec rm -f {} \;
  find . -name ".DS_Store" -exec rm -f {} \;
  find . -name ".Trashes" -exec rm -rf {} \;
  find . -name "._.Trashes" -exec rm -f {} \;
  find . -name ".Spotlight-V100" -exec rm -rf {} \;
  find . -name ".fseventsd" -exec rm -rf {} \;
  find . -name ".TemporaryItems" -exec rm -rf {} \;
  find . -name ".VolumeIcon.icns" -exec rm -f {} \;
  find . -name "Icon?" -exec rm -f {} \;
  find . -name ".com.apple.timemachine.supported" -exec rm -f {} \;
  find . -name ".AppleDouble" -exec rm -rf {} \;
  find . -name ".AppleDB" -exec rm -rf {} \;
  find . -name ".AppleDesktop" -exec rm -rf {} \;
  find . -name "TheVolumeSettingsFolder" -exec rm -rf {} \;
  find . -name ".AppleSwap" -exec rm -rf {} \;
  find . -name "Desktop Folder" -exec rm -rf {} \;
  find . -name "Network Trash Folder" -exec rm -rf {} \;
  find . -name ".DocumentRevisions-V100" -exec rm -rf {} \;
  find . -name ".PKInstallSandboxManager" -exec rm -rf {} \;
  find . -name ".PKInstallSandboxManager-SystemSoftware" -exec rm -rf {} \;
  find . -name ".Spotlight-*" -exec rm -rf {} \;
  find . -name ".apdisk" -exec rm -f {} \;
  find . -name "._.TemporaryItems" -exec rm -f {} \;
}

################################################################################
# Decompress files
################################################################################
function decompress_files() {
  local extensions=("*.zip" "*.7z" "*.rar" "*.tar" "*.tar.gz" "*.tar.bz2" "*.tar.xz")

  for ext in "${extensions[@]}"; do
    for archive_file in $ext; do
      if [ -f "$archive_file" ]; then
        folder_name="${archive_file%.*}"

        rm -rf "$folder_name"
        mkdir -p "$folder_name"

        7z x "$archive_file" -o"$folder_name" -mmt

        if [ $? -eq 0 ]; then
          rm "$archive_file"
        fi
      fi
    done
  done
}
