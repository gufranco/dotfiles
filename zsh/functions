#!/usr/bin/env bash

################################################################################
# System specific functions
################################################################################
case "$(uname)" in
  "Linux")
    ############################################################################
    # Open the current directory, otherwise open the given location
    ############################################################################
    function open() {
      if [ $# -eq 0 ]; then
        xdg-open . >/dev/null 2>&1
      else
        xdg-open "$@" >/dev/null 2>&1
      fi
    }

    ;;
  "Darwin")

    ;;
esac

################################################################################
# Update and upgrade everything
################################################################################
function f5() {
  # Dotfiles
  git -C "$HOME/.dotfiles" pull-sub
  git -C "$HOME/.dotfiles" submodule update --recursive --remote
  git -C "$HOME/.dotfiles" fetch --prune
  git -C "$HOME/.dotfiles" gc --aggressive --prune=now

  # Vim
  vim +PlugUpgrade +PlugUpdate +CocUpdateSync +PlugClean! +qall

  # Plugins
  for dir in \
    "$HOME/.oh-my-zsh" \
    "$HOME/.oh-my-zsh/custom"/{themes,plugins}/*/ \
    "$HOME/.tmux/plugins/"*/; do

    if [ ! -d "$dir/.git" ]; then
      continue
    fi

    if [[ "$dir" == "$HOME/.tmux/plugins/tpm/" ]]; then
      continue
    fi

    git -C "$dir" checkout "$(git -C "$dir" symbolic-ref --short HEAD 2>/dev/null || echo "master")"
    git -C "$dir" stash clear
    git -C "$dir" stash
    git -C "$dir" pull
    git -C "$dir" stash apply
    git -C "$dir" fetch --prune
    git -C "$dir" gc --aggressive --prune=now
  done

  case "$(uname)" in
    "Linux")
      sudo apt update -y
      sudo apt dist-upgrade -y
      sudo apt autoremove -y
      sudo apt clean all -y

      ;;
    "Darwin")
      brew update
      brew bundle --file "$HOME/.dotfiles/Brewfile" --force cleanup
      brew bundle --file "$HOME/.dotfiles/Brewfile"
      brew upgrade
      brew cu --all --yes --cleanup
      brew cleanup -s

      mas upgrade
      sudo softwareupdate -i -a

      sudo find 2> /dev/null /private/var/folders/ -type d -name com.apple.dock.launchpad -exec rm -rf {} +
      killall Dock

      ;;
  esac

  # Reload zsh settings
  # shellcheck disable=SC1091
  source "$HOME/.zshrc"
}

################################################################################
# Convert any movie file to VCD ISO
################################################################################
function convert_to_vcd() {
  local CD74=false
  local INPUT_VIDEO=""
  local SUBTITLES=""
  local OVERLAP=60
  local CHUNK_SECONDS=4800

  for arg in "$@"; do
    case "$arg" in
      --cd74) CD74=true ;;
      *) [ -z "$INPUT_VIDEO" ] && INPUT_VIDEO="$arg" || SUBTITLES="$arg" ;;
    esac
  done

  if [ -z "$INPUT_VIDEO" ] || [ ! -f "$INPUT_VIDEO" ]; then
    echo "[ERROR] Input video is missing or invalid."
    echo "Usage: convert_to_vcd [--cd74] video.[mp4|mkv] [optional subtitles.srt]"
    return 1
  fi

  $CD74 && CHUNK_SECONDS=4440
  if $CD74; then
    echo "[INFO] Using chunk duration: ${CHUNK_SECONDS}s (74min mode)"
  else
    echo "[INFO] Using chunk duration: ${CHUNK_SECONDS}s (80min mode)"
  fi

  for tool in ffmpeg vcdimager iconv file ffprobe; do
    command -v "$tool" >/dev/null || { echo "[ERROR] Missing tool: $tool"; return 1; }
  done

  local BASENAME="${INPUT_VIDEO%.*}_disc"
  local ASSFILE=""
  if [ -n "$SUBTITLES" ]; then
    [ ! -f "$SUBTITLES" ] && echo "[ERROR] Subtitle file not found: $SUBTITLES" && return 1
    echo "[INFO] Subtitle provided: $SUBTITLES"
    local ENCODING
    ENCODING=$(file -I "$SUBTITLES" | awk -F'charset=' '{print $2}')
    echo "[DEBUG] Subtitle encoding: $ENCODING"
    if [[ "$ENCODING" != "utf-8" && "$ENCODING" != "us-ascii" ]]; then
      iconv -f "$ENCODING" -t UTF-8 "$SUBTITLES" > "${BASENAME}_utf8.srt"
      SUBTITLES="${BASENAME}_utf8.srt"
      echo "[INFO] Subtitle converted to UTF-8"
    fi
    ASSFILE="${BASENAME}.ass"
    ffmpeg -v error -i "$SUBTITLES" "$ASSFILE"
    {
      printf '[Script Info]\nScriptType: v4.00+\nPlayResX: 352\nPlayResY: 240\nScaledBorderAndShadow: yes\n\n'
      printf '[V4+ Styles]\nFormat: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n'
      printf 'Style: Default,Arial,16,&H0000FFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,1,1,2,10,10,10,1\n\n'
      printf '[Events]\nFormat: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n'
      cat "$ASSFILE"
    } > "${ASSFILE}.tmp" && mv "${ASSFILE}.tmp" "$ASSFILE"
  fi

  local DURATION
  DURATION=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$INPUT_VIDEO")
  DURATION=${DURATION%.*}
  echo "[DEBUG] Video duration: ${DURATION}s"

  local PART=1 START=0
  while [ "$START" -lt "$DURATION" ]; do
    echo "[INFO] Encoding part $PART (start=$START)..."
    local OUT="${BASENAME}${PART}.mpg"
    local BIN="${BASENAME}${PART}.bin"
    local CUE="${BASENAME}${PART}.cue"

    local FILTER="crop=in_h*4/3:in_h,scale=352:240"
    [ -n "$ASSFILE" ] && FILTER="subtitles=${ASSFILE},$FILTER"

    ffmpeg -v error -ss "$START" -t "$CHUNK_SECONDS" -i "$INPUT_VIDEO" \
      -vf "$FILTER" -r 29.97 -g 15 -mbd 2 -cmp 2 -subcmp 2 \
      -c:v mpeg1video -b:v 1150000 -minrate 1150000 -maxrate 1150000 -bufsize 327680 \
      -c:a mp2 -ab 224k -ac 2 -ar 44100 \
      -muxrate 1411200 -packetsize 2324 -f vcd "$OUT"

    [ ! -f "$OUT" ] && echo "[ERROR] ffmpeg failed for part $PART" && return 1

    echo "[INFO] Generating BIN/CUE for part $PART..."
    vcdimager -t vcd2 -c "$CUE" -b "$BIN" "$OUT" || {
      echo "[ERROR] vcdimager failed for part $PART"
      return 1
    }

    START=$((START + CHUNK_SECONDS - OVERLAP))
    PART=$((PART + 1))
  done

  echo "[INFO] Completed. Total discs: $((PART - 1))"
}

################################################################################
# Prepare n64 roms for Mr Backup Z64
################################################################################
function prepare_mr_backup_z64_roms() {
  IFS=$'\n\t'

  local MAX_CF_SIZE=$((1990 * 1024 * 1024))
  local MAX_FILES_PER_FOLDER=500
  local ORIGINAL_DIR="$(pwd)"
  local TMP_DIR="$(mktemp -d -t prepare_z64_roms.XXXXXXXXXX)"

  trap 'rm -rf "$TMP_DIR"' EXIT

  cd "$TMP_DIR" || exit

  find "$ORIGINAL_DIR" -maxdepth 1 -type f -exec cp -p {} . \;

  for file in *; do
    if [[ -f "$file" ]]; then
      local base="$(basename "$file")"
      local first_char="$(echo "$base" | cut -c1)"

      if [[ "$first_char" =~ [0-9] ]]; then
        target_folder="#"
      else
        target_folder="$(echo "$first_char" | tr '[:lower:]' '[:upper:]')"
      fi

      mkdir -p "$target_folder"
      mv -- "$file" "$target_folder/"
    fi
  done

  local DESTINATION="$TMP_DIR/CF_GROUPS"
  mkdir -p "$DESTINATION"

  local group_number=1
  local group_folder="${DESTINATION}/CF_Group_${group_number}"
  mkdir -p "$group_folder"
  local current_size=0
  local current_files=0

  for folder in $(find . -mindepth 1 -maxdepth 1 -type d ! -name 'CF_GROUPS' | sort); do
    local folder_size_kb=$(du -sk "$folder" | awk '{print $1}')
    local folder_size_bytes=$((folder_size_kb * 1024))
    local file_count=$(find "$folder" -type f | wc -l)

    if (( current_size + folder_size_bytes > MAX_CF_SIZE )) || (( current_files + file_count > MAX_FILES_PER_FOLDER )); then
      group_number=$((group_number + 1))
      group_folder="${DESTINATION}/CF_Group_${group_number}"
      mkdir -p "$group_folder"
      current_size=0
      current_files=0
    fi

    mv -- "$folder" "$group_folder/"
    current_size=$((current_size + folder_size_bytes))
    current_files=$((current_files + file_count))
  done

  mv "$DESTINATION"/* "$ORIGINAL_DIR/"

  echo "[DONE] prepare_z64_roms completed."
}

################################################################################
# Sync games library
################################################################################
function sync_games() {
  __sync_redump
  __sync_internet_archive
  __sync_no_intro
  __sync_ossc
}

function __sync_redump() {
  local group="Redump"
  local folders=(
    "NEC - PC Engine CD & TurboGrafx CD"
    "Nintendo - GameCube - NKit RVZ [zstd-19-128k]"
    "Sega - Dreamcast - GDI Files"
    "Sega - Dreamcast"
    "Sega - Mega CD & Sega CD"
    "Sega - Saturn"
    "SNK - Neo Geo CD"
    "Sony - PlayStation"
    "Sony - PlayStation Portable"
    "Sony - PlayStation 2"
    "Video CD"
  )

  for folder in "${folders[@]}"; do
    mkdir -p "./$group/$folder/"
    echo "\nProcessing: $folder"

  rclone sync \
    --progress \
    --ignore-case \
    --multi-thread-streams=0 \
    --size-only \
    --delete-excluded \
    \
    --filter '- *\(Demo*' \
    --filter '- *Demo\)*' \
    --filter '- *\(Debug*' \
    --filter '- *Debug\)*' \
    --filter '- *\(Beta*' \
    --filter '- *Beta\)*' \
    --filter '- *\(Proto*' \
    --filter '- *Proto\)*' \
    --filter '- *\(Prototype*' \
    --filter '- *Prototype\)*' \
    --filter '- *\(Unl*' \
    --filter '- *Unl\)*' \
    --filter '- *\(Unlicensed*' \
    --filter '- *Unlicensed\)*' \
    --filter '- *\(Trial*' \
    --filter '- *Trial\)*' \
    --filter '- *\(Kiosk*' \
    --filter '- *Kiosk\)*' \
    --filter '- *\(Preview*' \
    --filter '- *Preview\)*' \
    --filter '- *\(Promo*' \
    --filter '- *Promo\)*' \
    --filter '- *\(Promotional*' \
    --filter '- *Promotional\)*' \
    \
    --filter '- *\ Demo Disc\ *' \
    --filter '- *\ Interactive Multi-Game Demo Disc\ *' \
    --filter '- *\ Interactive Sampler Disc\ *' \
    --filter '- *\ Jam Pack\ *' \
    --filter '- *\ PlayStation Underground\ *' \
    --filter '- *\ Trial Edition\ *' \
    --filter '- *\ Trial Version\ *' \
    \
    --filter '+ *\(World*' \
    --filter '+ *\(USA*' \
    --filter '+ *\(Japan*' \
    --filter '+ *\(Export*' \
    --filter '+ *\(Brazil*' \
    --filter '+ *Brazil\)*' \
    \
    --filter '- *' \
    \
    --http-url "https://myrient.erista.me/files/$group/" \
    ":http:$folder/" \
    "./$group/$folder/"
  done
}

function __sync_internet_archive() {
  local folders=(
    "desktop_20240424"
    "htgdb-gamepacks"
    "mdplus_collection_22_04_16"
    "neo-geo-aes-romset"
    "Neo-geoRomCollectionByGhostware"
    "neogeoaesmvscomplete"
    "RetroarchSystemFiles/Retroarch-System/"
    "ric64s-neosd-rom-archive"
    "rom_scene_collection"
    "rom-hack-patch-archive"
    "romhacking.net-20240801"
  )

  for folder in "${folders[@]}"; do
    mkdir -p "./Internet Archive/$folder/"
    echo "\nProcessing: $folder"

    rclone sync \
      --progress \
      --ignore-case \
      --multi-thread-streams=0 \
      --size-only \
      --delete-excluded \
      --exclude '*.{torrent,xml,sqlite,png,jpg}' \
      "archive.org:$folder/" \
      "./Internet Archive/$folder/"
  done
}

function __sync_no_intro() {
  local group="No-Intro"
  local folders=(
    "Bandai - WonderSwan"
    "Bandai - WonderSwan Color"
    "Bandai - WonderSwan Color (Aftermarket)"
    "Microsoft - MSX"
    "Microsoft - MSX (Aftermarket)"
    "Microsoft - MSX2"
    "Microsoft - MSX2 (Aftermarket)"
    "NEC - PC Engine - TurboGrafx-16"
    "NEC - PC Engine - TurboGrafx-16 (Aftermarket)"
    "NEC - PC Engine - TurboGrafx-16 (Private)"
    "NEC - PC Engine SuperGrafx"
    "Nintendo - Family Computer Disk System (FDS)"
    "Nintendo - Family Computer Disk System (FDS) (Aftermarket)"
    "Nintendo - Family Computer Disk System (QD)"
    "Nintendo - Game Boy"
    "Nintendo - Game Boy (Aftermarket)"
    "Nintendo - Game Boy (Private)"
    "Nintendo - Game Boy Advance"
    "Nintendo - Game Boy Advance (Aftermarket)"
    "Nintendo - Game Boy Advance (Multiboot)"
    "Nintendo - Game Boy Advance (Play-Yan)"
    "Nintendo - Game Boy Advance (Private)"
    "Nintendo - Game Boy Advance (Video)"
    "Nintendo - Game Boy Advance (Video) (Aftermarket)"
    "Nintendo - Game Boy Advance (Video) (Private)"
    "Nintendo - Game Boy Advance (e-Reader)"
    "Nintendo - Game Boy Advance (e-Reader) (Aftermarket)"
    "Nintendo - Game Boy Color"
    "Nintendo - Game Boy Color (Aftermarket)"
    "Nintendo - Game Boy Color (Private)"
    "Nintendo - New Nintendo 3DS (Decrypted)"
    "Nintendo - Nintendo 3DS (Decrypted)"
    "Nintendo - Nintendo 64 (BigEndian)"
    "Nintendo - Nintendo 64 (BigEndian) (Aftermarket)"
    "Nintendo - Nintendo 64 (BigEndian) (Private)"
    "Nintendo - Nintendo 64DD"
    "Nintendo - Nintendo DS (Decrypted)"
    "Nintendo - Nintendo DS (Decrypted) (Aftermarket)"
    "Nintendo - Nintendo DS (Decrypted) (Private)"
    "Nintendo - Nintendo DSi (Decrypted)"
    "Nintendo - Nintendo DSi (Digital)"
    "Nintendo - Nintendo DSi (Digital) (CDN) (Decrypted)"
    "Nintendo - Nintendo Entertainment System (Headered)"
    "Nintendo - Nintendo Entertainment System (Headered) (Aftermarket)"
    "Nintendo - Nintendo Entertainment System (Headered) (Private)"
    "Nintendo - Nintendo Entertainment System (Headerless)"
    "Nintendo - Nintendo Entertainment System (Headerless) (Aftermarket)"
    "Nintendo - Nintendo Entertainment System (Headerless) (Private)"
    "Nintendo - Satellaview"
    "Nintendo - Satellaview (Aftermarket)"
    "Nintendo - Sufami Turbo"
    "Nintendo - Super Nintendo Entertainment System"
    "Nintendo - Super Nintendo Entertainment System (Aftermarket)"
    "Nintendo - Super Nintendo Entertainment System (Private)"
    "Nintendo - Virtual Boy"
    "Nintendo - Virtual Boy (Aftermarket)"
    "Nintendo - Virtual Boy (Private)"
    "Non-Redump - NEC - PC Engine CD + TurboGrafx CD"
    "Non-Redump - NEC - PC Engine CD + TurboGrafx CD (Aftermarket)"
    "Non-Redump - Nintendo - Nintendo GameCube"
    "Non-Redump - Nintendo - Nintendo GameCube (Aftermarket)"
    "Non-Redump - Nintendo - Nintendo GameCube (Private)"
    "Non-Redump - Nintendo - Wii"
    "Non-Redump - Panasonic - 3DO Interactive Multiplayer"
    "Non-Redump - Sega - Dreamcast"
    "Non-Redump - Sega - Dreamcast (Aftermarket)"
    "Non-Redump - Sega - Dreamcast (Private)"
    "Non-Redump - Sega - Sega Mega CD + Sega CD"
    "Non-Redump - Sega - Sega Mega CD + Sega CD (Aftermarket)"
    "Non-Redump - Sega - Sega Saturn"
    "Non-Redump - Sony - PlayStation"
    "Non-Redump - Sony - PlayStation 2"
    "Non-Redump - Sony - PlayStation Portable"
    "SNK - NeoGeo Pocket"
    "SNK - NeoGeo Pocket Color"
    "Sega - 32X"
    "Sega - 32X (Aftermarket)"
    "Sega - Dreamcast (Visual Memory Unit)"
    "Sega - Game Gear"
    "Sega - Game Gear (Aftermarket)"
    "Sega - Master System - Mark III"
    "Sega - Master System - Mark III (Aftermarket)"
    "Sega - Master System - Mark III (Private)"
    "Sega - Mega Drive - Genesis"
    "Sega - Mega Drive - Genesis (Aftermarket)"
    "Sega - Mega Drive - Genesis (Private)"
    "Sega - SG-1000"
    "Sega - SG-1000 (Aftermarket)"
    "Seta - Aleck64 (BigEndian)"
  )

  for folder in "${folders[@]}"; do
    mkdir -p "./$group/$folder/"
    echo "\nProcessing: $folder"

    rclone sync \
      --progress \
      --ignore-case \
      --multi-thread-streams=0 \
      --size-only \
      --delete-excluded \
      --http-url "https://myrient.erista.me/files/$group/" \
      ":http:$folder/" \
      "./$group/$folder/"
  done
}

function __sync_ossc() {
  mkdir -p "./OSSC/"
  echo "\nProcessing: OSSC"

  rclone sync \
    --progress \
    --ignore-case \
    --multi-thread-streams=0 \
    --size-only \
    --delete-excluded \
    --exclude '*.{jic,txt}' \
     --http-url http://www.infocult.com/m/ossc/fw/v1-series/ \
    ":http:" \
    "./OSSC"
}
